关于nodelib：
    这个项目对我而言只是为了熟悉一下nodejs，一时兴起写的一个作业。
所以写到目前这个样子大概就算是结束了，毕竟真的要熟悉所有的nodejs
的feature，除非有真正意义上会发布的项目才行，而一时半会我估计也用
不上。。。。
    之前仅仅在使用web3j的时候稍微接触过一点nodejs的东西，当时也在
网上搜了一些例程，说实话，这破玩意儿一方面语法真是随心所欲（毕竟
是js，或者说不愧是js），另一方面真用起来又真的是有点不够随心所欲。
看着那些写的跟草一样的例程就头疼。

关于nodelib的目标：
    我的本意是用nodelib项目来熟悉nodejs编程，目标是写一个尽可能解
耦、尽可能模块化的project，并且具有一定的可扩展性（比如关于房间的
写法，比如关于指令cmds的写法），能实现实时热更新（还没实现，但是
可行）
    对mudlib熟悉的同学会发现，我在nodelib的目录结构和文件命名上也
尽量像mudlib靠拢，这是病。。。
    我在这里实现了：
    1. 开启tcp服务，管理连接（绑定到由/obj/user.js new出来的userob）
    2. 公共服务和公共数据以daemon形式存在于/daemons/目录里。
    3. /adm/app.js管理所有daemon
    4. /adm/config.js管理所有宏（类似于mudos的config file）
    5. 实现了用户指令的多文件化（一个指令一个js），没实现分权限
    6. 实现了房间（用了很恶心的写法，不过也跟指令差不多），以及容器
概念（environment和inventory）
    7. 实现了玩家在房间之间的移动
    8. 实现了登录，读取文件数据，存盘，退出
    9. 还有些别的七七八八的，比如颜色码什么的

关于为什么选mud作为项目方向：
    因为熟啊，完全不需要琢磨需求，只要专注于学习nodejs本身的语法就
好了，相当于省掉了一个产品经理的工作量。

关于mud
    国内主流mud（虽然mud本身就已经够非主流了现在），基本上都是基
于mudos或者fluffos的lpc实现。
    说句公道话，作为一个语言，lpc简直爽。
    可惜一直非主流。


最后：
    nodelib大概就会停在这里了，我去玩golang了。。。。

最后的最后：
    一些尚未处理的：
    1. 粘包完全未处理。
    2. Socket.on('data')在一些情况下（比如使用ubuntu下的telnet连的时
候），对一些中文有什么误会？而我用ytin或者node自己的socket client
就没有这个问题，待解。。。
    3. 类似于mud的 apply id()，我勉强在environment.js里实现了一下下，
非常不完整，比如没有处理cloth 1/2/3这种带序号的id，当然如果做网游是
不需要这种玩意儿，但是我想尽量模拟mud。。。shrug
    4. 热更我知道怎么写，但是没做
    5. 还是无法随心所欲的做到像lpc那样object满天飞，随用随编译，特别
是单例，不好办。。。
